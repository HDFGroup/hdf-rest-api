$schema: “https://spec.openapis.org/oas/3.1/dialect/base”
openapi: "3.1.0"
info:
  title: HDF Scalable Data Service REST API
  description: RESTful application programming interface documentation for HDF Scalable Data Service (HSDS).
  contact:
    name: The HDF Group
    url: https://www.hdfgroup.org
    email: info@hdfgroup.org
  # termsOfService: TODO url
  # license
  #   name: TODO
  #   url: TODO
  version: "2.0"

externalDocs:
  description: HSDS REST API documentation
  url: "http://h5serv.readthedocs.io/en/latest/index.html"

tags:
  - name: Domain
    description: Operations involving the file Domain.
  - name: Group
    description: Operations involving Groups.
  - name: Link
    description: Operations involving Links.
  - name: Dataset
    description: Operations involving Datasets.
  - name: Datatype
    description: Operations involving Datatypes.
  - name: Attribute
    description: Operations involving Attributes.
  - name: ACLS
    description: Operations involving Attributes.

servers:
  - url: http://hsdshdflab.hdfgroup.org
    description: HSDS default server

components:
  schemas:
    ACL:
      description: Access Control List for a single user.
      type: object
      properties:
        username:
          type: object
          properties:
            create:
              type: boolean
            update:
              type: boolean
            delete:
              type: boolean
            updateACL:
              type: boolean
            read:
              type: boolean
            readACL:
              type: boolean
    ACLS:
      type: object
      description: Access Control Lists for users.
      properties:
        forWhom:
          $ref: "#/components/schemas/ACL"
      examples:
        - test_user1:
            create: true
            update: true
            delete: true
            updateACL: true
            read: true
            readACL: true
          default:
            create: false
            update: false
            delete: false
            updateACL: false
            read: true
            readACL: false

  parameters:
    authorization:
      in: header
      name: Authorization
      schema:
        type: string
        description: >
          Credentials for the request.

          'Basic' authorization, `"Basic " + base64(<username>:<password>)`
    linkname:
      in: path
      name: linkname
      required: true
      schema:
        type: string
        description: >
          URL-encoded name of the Link.
          Label/name/title of the Link, e.g., `dset1` or `group3`.
          `linkname` cannot contain slashes.
    query_domain:
      in: query
      name: domain
      schema:
        type: string
        description: Domain on service to access, e.g., `/home/user/someproject/somefile`.
    path_group_uuid:
      in: path
      name: id
      required: true
      description: UUID of the Group, e.g. `g-37aa76f6-2c86-11e8-9391-0242ac110009`.
      schema:
        type: string
    path_dataset_uuid:
      in: path
      description: UUID of the Dataset.
      name: id
      required: true
      schema:
        type: string
    path_datatype_uuid:
      name: id
      in: path
      required: true
      description: UUID of the committed datatype.
      schema:
        type: string

  securitySchemes:
    basicAuth:
      type: http
      scheme: basic

paths:
  /:
    put:
      tags:
        - Domain
      summary: Create a new Domain on the service.
      description: >
        Domains represent dataspaces analogous to hdf5 files.

        Folders are 'placeholder' domains which lack a root Group. Their
        main use is to manage top-level directories (outside of user space)
        and to fill out a user's directory paths if required.
        E.g., `/home/user/project/missingdir/data.h5`

        Note: Initially, the only object in a Domain is the root group. Use
        other `put` and `post` operations to create new objects in the
        domain.

        Note: Domains (and Folders) may only be created as direct children
        of existing Domains. e.g., `/home/user/project/missingdir` _must_
        exist prior to the creation of Domain
        `/home/user/project/missingdir/data.h5`.

        Note: The operation will fail if the domain already exists
        (Error 409).
      requestBody:
        content:
          application/json:
            schema:
              type: object
      parameters:
        - $ref: "#/components/parameters/query_domain"
        - name: folder
          in: query
          schema:
            type: number
          description: If present and `1`, creates a Folder instead of a Domain.
        - $ref: "#/components/parameters/authorization"
      responses:
        "201":
          description: Created.
          headers:
            Content-Length:
              description: Length of response in bytes.
              schema:
                type: string
            Etag:
              description: Hash-code status of resource.
              schema:
                type: string
            Content-Type:
              description: MIME type of response.
              schema:
                type: string
                enum:
                  - application/json
          content:
            application/json:
              schema:
                type: object
                properties:
                  acls:
                    $ref: "#/components/schemas/ACLS"
                  created:
                    description: When domain was created.
                    type: number
                    examples:
                      - 1521482043.5271084
                  lastModified:
                    description: When object was last modified.
                    type: number
                    examples:
                      - 1521482043.5271084
                  owner:
                    description: Name of owner.
                    type: string
                    examples:
                      - "test_user1"
                  root:
                    description: ID of root group.
                    type: string
                    examples:
                      - "g-82da0346-2b9e-11e8-9391-0242ac110009"
        default:
          description: Operation unsuccessful.

    get:
      tags:
        - Domain
      summary: Get information about the requested domain.
      description: >
        If the domain is of class 'folder', `root` is absent from returned
        JSON object.

        If no domain query parameter is provided, returns:
        `{"domains": [], "href": []}`
      parameters:
        - $ref: "#/components/parameters/query_domain"
        - $ref: "#/components/parameters/authorization"
      responses:
        "200":
          description: Operation successful.
          headers:
            content-length:
              description: Length of response in bytes.
              schema:
                type: string
            Etag:
              description: Hash-code status of resource.
              schema:
                type: string
            Content-Type:
              description: MIME type of response -- always 'application/json'
              schema:
                type: string
                enum:
                  - application/json
          content:
            application/json:
              schema:
                type: object
                properties:
                  root:
                    description: >
                      UUID of root Group.
                      If Domain is of class 'folder', this entry is not present.
                    type: string
                    examples:
                      - "g-82da0346-2b9e-11e8-9391-0242ac110009"
                  owner:
                    type: string
                    examples:
                      - "test_user1"
                  class:
                    description: >
                      Category of Domain.
                      If 'folder' no root group is included in response.
                    type: string
                    enum:
                      - domain
                      - folder
                    examples:
                      - domain
                  created:
                    type: number
                    examples:
                      - 1521476710.039304
                  lastModified:
                    type: number
                    examples:
                      - 1521476710.039304
                  hrefs:
                    description: >
                      Array of url references and their relation to this Domain.
                      Should include entries for:
                      `acls`,
                      `database` (if not class is not `folder`),
                      `groupbase` (if not class is not `folder`),
                      `parent`,
                      `root` (if not class is not `folder`),
                      `self`,
                      `typebase` (if not class is not `folder`).
                    type: array
                    items:
                      type: object
                      properties:
                        href:
                          description: URL to reference.
                          type: string
                        rel:
                          description: Relation to this Domain.
                          type: string
                    examples:
                      - rel: acls
                        href: "http://myfile.test_user1.home/acls"
                      - rel: database
                        href: "http://myfile.test_user1.home/datasets"
                      - rel: groupbase
                        href: "http://myfile.test_user1.home/groups"
                      - rel: parent
                        href: "http://myfile.test_user1.home/?domain=/home/test_user1"
                      - rel: root
                        href: "http://myfile.test_user1.home/groups/g-17d88042-2b92-11e8-9391-0242ac110009"
                      - rel: self
                        href: "http://myfile.test_user1.home/"
                      - rel: typebase
                        href: "http://myfile.test_user1.home/datatypes/"
        default:
          description: Operation unsuccessful.

    delete:
      tags:
        - Domain
      summary: Delete the specified Domain or Folder.
      description: >
        Delete the domain and all associated groups, datasets, attributes,
        etc.

        Note: if there are Domains which are children of this Domain
        (e.g., deleting `somedir` from `/home/user/project/somedir/data.h5`),
        those children directories will _not_ be deleted.
        (TODO: abandoned children is incorrect behavior?)
      parameters:
        - $ref: "#/components/parameters/query_domain"
        - $ref: "#/components/parameters/authorization"
      responses:
        "200":
          description: Operation successful.
          headers:
            content-length:
              description: Length of response in bytes.
              schema:
                type: string
            Etag:
              description: Hash-code status of resource.
              schema:
                type: string
            Content-Type:
              description: MIME type of response -- always 'application/json'
              schema:
                type: string
                enum:
                  - application/json
          content:
            application/json:
              schema:
                type: object
                description: The Domain or Folder which was deleted.
                properties:
                  domain:
                    type: string
                    description: domain path
                    examples:
                      - "/home/test_user/some_path/some_file"
        default:
          description: Operation unsuccessful.

  # end '/'

  /groups:
    post:
      tags:
        - Domain
        - Group
      summary: Create a new Group.
      description: >
        Create a new Group in the given Domain.

        By default, the new Group it not attached to any other object in the
        Domain; it is left to the user or application to appropriately attach
        the new Group, i.e., Link to.

        A link description may be supplied in the request body as
        structured JSON, which will immediately link the new Group. If
        supplying link info, the header `Content-Type: application/json`
        should also be supplied as a matter of course. Note that this
        link will be a hard link -- it refers directly to the object.
      parameters:
        - $ref: "#/components/parameters/query_domain"
        - $ref: "#/components/parameters/authorization"

      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                link:
                  description: >
                    Optional JSON object to immediately create a hard Link to
                    the newly-created object. If present, both `id` and `name`
                    must be supplied and `id` must be the UUID of an existing
                    Group -- UUID of any non-Group object will result in an
                    error.

                    Note that the id reference is _reverse_ the usual for Link
                    creation: the `id` value refers to the targeting object,
                    not the target object of the link.
                  type: object
                  required:
                    - id
                    - name
                  properties:
                    id:
                      description: "UUID of Group to link from."
                      type: string
                      examples:
                        - "g-a613ed48-2c86-11e8-9391-0242ac110009"
                    name:
                      description: Title of Link.
                      type: string
                      examples:
                        - "g2"
      responses:
        "201":
          description: New Group created.
          headers:
            content-length:
              description: Length of response in bytes.
              schema:
                type: string
            Etag:
              description: Hash-code status of resource.
              schema:
                type: string
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    description: UUID of new Group.
                    type: string
                    examples:
                      - "g-a613ed48-2c86-11e8-9391-0242ac110009"
                  root:
                    description: UUID of root Group in Domain.
                    type: string
                    examples:
                      - "g-37aa76f6-2c86-11e8-9391-0242ac110009"
                  lastModified:
                    type: number
                    examples:
                      - 1521581745.9365487
                  created:
                    type: number
                    examples:
                      - 1521581745.9365487
                  attributeCount:
                    type: number
                    examples:
                      - 0
                  linkCount:
                    type: number
                    examples:
                      - 0
        default:
          description: Operation unsuccessful.

    get:
      tags:
        - Domain
        - Group
      summary: Get UUIDs for all non-root Groups in Domain.
      description: >
        Listed Group(s) must be reachable via hard Link from root Group,
        either directly or indirectly. If Groups exist which are unlinked or
        not reachable by tree originating at root, they will not be included
        in the list.

        If there is any hard Link in the tree to a Group which has been
        deleted, the request will fail with error 410 (GONE).
      parameters:
        - $ref: "#/components/parameters/query_domain"
        - $ref: "#/components/parameters/authorization"
      responses:
        "200":
          description: OK
          headers:
            content-length:
              description: Length of response in bytes.
              schema:
                type: string
            Etag:
              description: Hash-code status of resource.
              schema:
                type: string
            Content-Type:
              description: MIME type of response -- always 'application/json'
              schema:
                type: string
          content:
            application/json:
              schema:
                type: object
                properties:
                  groups:
                    type: array
                    items:
                      description: UUID of each Group.
                      type: string
                    examples:
                      - "g-a613ed48-2c86-11e8-9391-0242ac110009"
                      - "g-37aa76f6-2c86-11e8-9391-0242ac110009"
                  hrefs:
                    type: array
                    items:
                      description: >
                        References to other objects.

                        Must contain references for only:
                        `attributes`,
                        `home`,
                        `links`,
                        `root`,
                        `self`.
                      type: object
                      properties:
                        href:
                          description: URL reference.
                          type: string
                        rel:
                          description: Relation to this object.
                          type: string
                    examples:
                      - rel: "attributes"
                        href: "http://localhost:5101/groups/g-ee2f6a2c-3847-11e8-a123-0242ac110009/attributes?domain=/home/test_user1/file"
                      - rel: "home"
                        href: "http://localhost:5101/?domain=/home/test_user1/file"
                      - rel: "links"
                        href: "http://localhost:5101/groups/g-ee2f6a2c-3847-11e8-a123-0242ac110009/links?domain=/home/test_user1/file"
                      - rel: "root"
                        href: "http://localhost:5101/groups/g-ed14d712-3847-11e8-a123-0242ac110009?domain=/home/test_user1/file"
                      - rel: "self"
                        href: "http://localhost:5101/groups/g-ee2f6a2c-3847-11e8-a123-0242ac110009?domain=/home/test_user1/file"
        default:
          description: Operation unsuccessful.

  # end '/groups/'

  /groups/{id}:
    get:
      tags:
        - Group
      summary: Get information about a Group.
      parameters:
        - $ref: "#/components/parameters/path_group_uuid"
        - $ref: "#/components/parameters/query_domain"
        - $ref: "#/components/parameters/authorization"
        - name: getalias
          in: query
          schema:
            type: integer
            enum:
              - 0
              - 1
            description: >
              Optional body content, gets the alias (path name(s) from root) of
              the group as part of the response. Only includes paths as reached
              via _hard_ Links.

              If present, must be either `0` (no alias list) or `1` (alias list).
      responses:
        "200":
          description: OK
          headers:
            content-length:
              description: Length of response in bytes.
              schema:
                type: string
            Etag:
              description: Hash-code status of resource.
              schema:
                type: string
            Content-Type:
              description: MIME type of response -- always 'application/json'
              schema:
                type: string
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    description: UUID of this Group.
                    type: string
                    examples:
                      - g-37aa76f6-2c86-11e8-9391-0242ac110009
                  root:
                    description: UUID of root Group.
                    type: string
                    examples:
                      - g-37aa76f6-2c86-11e8-9391-0242ac110009
                  alias:
                    description: >
                      List of aliases for the Group, as reached by _hard_ Links.
                      If Group is unlinked, its alias list will be empty (`[]`).

                      Only present if `alias=1` is present as query parameter.
                    type: array
                    items:
                      type: string
                    examples:
                      - ["/g1/g1.1"]
                  created:
                    type: number
                    examples:
                      - 1521581560.6883142
                  lastModified:
                    type: number
                    examples:
                      - 1521644498.984212
                  domain:
                    type: string
                    examples:
                      - "/home/test_user1/file"
                  attributeCount:
                    type: number
                    examples:
                      - 4
                  linkCount:
                    type: number
                    examples:
                      - 2
                  hrefs:
                    description: List of references to other objects.
                    type: array
                    items:
                      description: >
                        References to other objects.

                        Must contain references for only:
                        `attributes`,
                        `home`,
                        `links`,
                        `root`,
                        `self`.
                      type: object
                      properties:
                        rel:
                          description: Relation to this object.
                          type: string
                          examples:
                            - "self"
                        href:
                          description: URL to reference.
                          type: string
                          examples:
                            - "http://myfile.test_user1.home/"
                    examples:
                      - rel: "attributes"
                        href: "http://localhost:5101/groups/g-37aa76f6-2c86-11e8-9391-0242ac110009/attributes?domain=/home/test_user1/file"
                      - rel: "home"
                        href: "http://localhost:5101/?domain=/home/test_user1/file"
                      - rel: "links"
                        href: "http://localhost:5101/groups/g-37aa76f6-2c86-11e8-9391-0242ac110009/links?domain=/home/test_user1/file"
                      - rel: "root"
                        href: "http://localhost:5101/groups/g-37aa76f6-2c86-11e8-9391-0242ac110009?domain=/home/test_user1/file"
                      - rel: "self"
                        href: "http://localhost:5101/groups/g-37aa76f6-2c86-11e8-9391-0242ac110009?domain=/home/test_user1/file"
        default:
          description: Operation unsuccessful.

    delete:
      tags:
        - Group
      summary: Delete a Group.
      description: >
        TODO: Will delete attributes of the Group.

        Will _not_ delete: (TODO: extensive tests to verify)

        + Objects (Groups, Types, Datasets) this object linked to

        + Links to this Group

        If a group is deleted while still hard-Linked, it will result in all
        `GET /groups` requests to fail with error 410 (GONE) until all Links to
        the deleted Group are also deleted.
      parameters:
        - $ref: "#/components/parameters/path_group_uuid"
        - $ref: "#/components/parameters/query_domain"
        - $ref: "#/components/parameters/authorization"
      responses:
        "200":
          description: Group removed.
          content:
            application/json:
              schema:
                type: object
        default:
          description: Operation unsuccessful.

  # end '/groups/{id}'

  /groups/{id}/links:
    get:
      tags:
        - Link
      summary: List all Links in a Group.
      description: >
        Items in the "list" array are sorted alphanumerically by title.
      parameters:
        - $ref: "#/components/parameters/path_group_uuid"
        - $ref: "#/components/parameters/query_domain"
        - name: Limit
          in: query
          schema:
            type: number
          description: >
            Cap the number of Links returned in list.

            Must be an integer `N >= 0`.

            May be greater than or equal to the number of Links; has no
            effect in that case.

            May be used in conjunction with query parameter `Marker`.
        - name: Marker
          in: query
          schema:
            type: string
          description: >
            Title of a Link; the first Link name to list.

            If no Link exists with that title, causes an error.

            May be used with query parameter `Limit`.
        - $ref: "#/components/parameters/authorization"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  links:
                    type: array
                    items:
                      type: object
                      properties:
                        id:
                          description: UUID of Link target.
                          type: string
                          examples:
                            - "g-a613ed48-2c86-11e8-9391-0242ac110009"
                        created:
                          type: number
                          examples:
                            - 1521644498.984212
                        class:
                          description: >
                            Indicate whether this Link is hard, soft, or
                            external.
                          type: string
                          enum:
                            - "H5L_TYPE_HARD"
                            - "H5L_TYPE_SOFT"
                            - "H5L_TYPE_EXTERNAL"
                          examples:
                            - "H5L_TYPE_HARD"
                            - "H5L_TYPE_SOFT"
                            - "H5L_TYPE_EXTERNAL"
                        title:
                          description: >
                            Name/label/title of the Link, as provided upon
                            creation.
                          type: string
                          examples:
                            - "g1"
                        target:
                          description: URL of Link target.
                          type: string
                          examples:
                            - "http://localhost:5101/groups/g-a613ed48-2c86-11e8-9391-0242ac110009?domain=/home/test_user1/file"
                        href:
                          description: URL to origin of Link.
                          type: string
                          examples:
                            - "http://localhost:5101/groups/g-37aa76f6-2c86-11e8-9391-0242ac110009/links/g1?domain=/home/test_user1/file"
                        collection:
                          description: >
                            What kind of object is the target. (TODO)
                          type: string
                          enum:
                            - "groups"
                            - "datasets"
                          #  - 'datatypes' TODO
                          #  - 'attributes' TODO
                          examples:
                            - "groups"
                            - "datasets"
                  hrefs:
                    type: array
                    description: >
                      List of references to other entities.

                      Should contain references for:
                      `home`,
                      `owner`,
                      `self`.
                    items:
                      type: object
                      properties:
                        rel:
                          description: Relation to this object.
                          type: string
                        href:
                          description: URL to reference.
                          type: string
                    examples:
                      - rel: home
                        href': http://localhost:5101/?domain=/home/test_user1/file
                      - rel: owner
                        href': http://localhost:5101/groups/g-cbb6b840-3849-11e8-a123-0242ac110009?domain=/home/test_user1/file
                      - rel: self
                        href': http://localhost:5101/groups/g-cbb6b840-3849-11e8-a123-0242ac110009/links?domain=/home/test_user1/file
        default:
          description: Operation unsuccessful.

  # end '/groups/{id}/links':

  /groups/{id}/links/{linkname}:
    put:
      tags:
        - Link
      summary: Create a new Link in a Group.
      description: >
        Link will be 'hard', 'soft', or 'external' depending on request
        elements.

        If `id` is provided, it will override other properties and attempt to
        create a hard Link to the object with that UUID.

        If `h5path` is provided, will create a symbolic link to object (if
        any) at the given path -- either a soft Link within this domain if no
        domain is specified, or an external Link.

        If `h5domain` is provided, will create an external Link, pointing to
        the object (if any) at `h5path` in domain `h5domain`.
      parameters:
        - $ref: "#/components/parameters/path_group_uuid"
        - $ref: "#/components/parameters/linkname"
        - $ref: "#/components/parameters/query_domain"
        - $ref: "#/components/parameters/authorization"

      requestBody:
        description: >
          JSON object describing the Link to create.

          Requires at least one of `id` and `h5path`; if both supplied,
          `id` takes priority. `h5domain` applies only if `h5path` is
          present, providing the Domain for an external Link.
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                id:
                  description: >
                    UUID of object to link to. Creates a hard Link.

                    Target UUID _must_ be the UUID of an object which exists
                    within the Domain. Deleted, missing, or malformed UUIDs
                    will result in an error.

                    Overrides other fields.
                  type: string
                  examples:
                    - "g-37aa76f6-2c86-11e8-9391-0242ac110009"
                h5path:
                  description: >
                    Path to an object relative to a Domain's root.
                    TODO: Resolves by following hard Links to groups that match
                    the path elements until a non-group terminal is reached.
                    (alias of Link?)

                    Creating a Link to a target that does not exist is allowed,
                    but must be done with caution -- results in a dangling Link.

                    If used, will create a soft or external Link.
                  type: string
                  examples:
                    - "/dset1"
                h5domain:
                  description: >
                    URL of external domain.

                    Results in an external Link.

                    Requires `h5path` be present.
                  type: string
                  examples:
                    - "external_target.test.hdfgroup.org"
      responses:
        "201":
          description: New Link created.
          content:
            application/json:
              schema:
                type: object
                description: 'Always returns `{"hrefs": []}`.'
                examples:
                  - hrefs: []
        default:
          description: Operation unsuccessful.

    get:
      tags:
        - Link
      summary: Get Link info.
      description: Get information about a given Link.
      parameters:
        - $ref: "#/components/parameters/path_group_uuid"
        - $ref: "#/components/parameters/linkname"
        - $ref: "#/components/parameters/query_domain"
        - $ref: "#/components/parameters/authorization"

      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  lastModified:
                    type: number
                  created:
                    type: number
                  link:
                    type: object
                    properties:
                      id:
                        type: string
                        examples:
                          - "g-a613ed48-2c86-11e8-9391-0242ac110009"
                      title:
                        type: string
                        examples:
                          - "g1"
                      collection:
                        type: string
                        examples:
                          - "group"
                      class:
                        type: string
                        examples:
                          - "H5L_TYPE_HARD"
                  hrefs:
                    type: array
                    description: >
                      List of references to other entities.

                      Should contain references for:
                      `home`,
                      `owner`,
                      `self`,
                      `target`,
                    items:
                      type: object
                      properties:
                        href:
                          description: URL to reference.
                          type: string
                        rel:
                          description: Relation to this object.
                          type: string
                    examples:
                      - rel: "home"
                        href: "http://localhost:5101/?domain=/home/test_user1/file"
                      - rel: "owner"
                        href: "http://localhost:5101/groups/g-8822ef7a-384b-11e8-a123-0242ac110009?domain=/home/test_user1/file"
                      - rel: "self"
                        href: "http://localhost:5101/groups/g-8822ef7a-384b-11e8-a123-0242ac110009/links/g1?domain=/home/test_user1/file"
                      - rel: "target"
                        href: "http://localhost:5101/groups/g-a613ed48-2c86-11e8-9391-0242ac110009?domain=/home/test_user1/file"
        default:
          description: Operation unsuccessful.

    delete:
      tags:
        - Link
      summary: Delete Link.
      description: Will _not_ delete the target object.
      parameters:
        - $ref: "#/components/parameters/path_group_uuid"
        - $ref: "#/components/parameters/linkname"
        - $ref: "#/components/parameters/query_domain"
        - $ref: "#/components/parameters/authorization"

      responses:
        "200":
          description: Link deleted.
          content:
            application/json:
              schema:
                type: object
                description: 'Always returns `{"hrefs": []}`.'
                examples:
                  - href: []
        default:
          description: Operation unsuccessful.

  # end '/groups/{id}/links/{linkname}'

  /datasets:
    post:
      tags:
        - Domain
        - Dataset
      summary: Create a Dataset.
      description: >
        Create a new Dataset object in the Domain.

        New object is not linked to or by any other object upon creation;
        will not appear in `datasets` listing until linked to tree
        originating at the Domain's root Group.
      parameters:
        - $ref: "#/components/parameters/query_domain"
        - $ref: "#/components/parameters/authorization"

      requestBody:
        description: >
          JSON object describing the Dataset's properties.
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                "type":
                  description: >
                    Predefined data Type, UUID of a commtted type, or JSON
                    object description of a Type.

                    Must be present.

                    Predefined types are:
                    `H5T_STD_U8BE`, (integer types of various sizes and
                    `H5T_STD_U8LE`,  endainness)
                    `H5T_STD_I8BE`,
                    `H5T_STD_I8LE`,
                    `H5T_STD_U16BE`,
                    `H5T_STD_U16LE`,
                    `H5T_STD_I16BE`,
                    `H5T_STD_I16LE`,
                    `H5T_STD_U32BE`,
                    `H5T_STD_U32LE`,
                    `H5T_STD_I32BE`,
                    `H5T_STD_I32LE`,
                    `H5T_STD_U64BE`,
                    `H5T_STD_U64LE`,
                    `H5T_STD_I64BE`,
                    `H5T_STD_I64LE`,
                    `H5T_IEEE_F32BE`, (floating-point types)
                    `H5T_IEEE_F32LE`,
                    `H5T_IEEE_F64BE`,
                    `H5T_IEEE_F64LE`

                    TODO: Type description objects.
                    For now, see:
                    http://h5serv.readthedocs.io/en/latest/Types/index.html
                  type: string # TODO: ambiguous string or object
                  examples:
                    - "H5T_STD_U32LE"
                shape:
                  description: >
                    Either an integer array giving the initial dimensions of
                    the dataset or `"H5S_NULL"`. If an array, each integer
                    value must be non-negative; if `maxdims` is supplied, the
                    integer must also be less than the `maxdims` value for that
                    dimension.

                    If shape is `H5S_NULL`, a dataset will be created which
                    can have a type and attributes, but unable to hold any
                    data.

                    If `shape` is omitted or empty (`[]`), will create a scalar
                    dataset -- dataset comprised of a single entity.
                  type: string
                  examples:
                    - [128, 64]
                maxdims:
                  description: >
                    Integer array diving the maximum allowed extent for each
                    dimension.

                    If a dimension's maxdim is `0`, the maximum extent is
                    unlimited.
                  type: array
                  items:
                    type: number
                  examples:
                    - [0, 512]
                creationProperties:
                  description: TODO
                  type: object
                link:
                  description: >
                    Optional JSON object to immediately create a hard Link to
                    the newly-created object. If present, both `id` and `name`
                    must be supplied and `id` must be the UUID of an existing
                    Group -- UUID of any non-Group object will result in an
                    error.

                    Note that the id reference is _reverse_ the usual for Link
                    creation: the `id` value refers to the targeting object,
                    not the target object of the link.
                  type: object
                  required:
                    - id
                    - name
                  properties:
                    id:
                      description: "UUID of Group to link from."
                      type: string
                      examples:
                        - "g-a613ed48-2c86-11e8-9391-0242ac110009"
                    name:
                      description: Title of Link.
                      type: string
                      examples:
                        - "dset2"
      responses:
        "201":
          description: Dataset created.
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    description: UUID of this Dataset.
                    type: string
                  root:
                    description: UUID of root Group in Domain.
                    type: string
                  created:
                    type: number
                  lastModified:
                    type: number
                  attributeCount:
                    type: number
                  "type":
                    description: (See `GET /datasets/{id}`)
                    type: object
                  shape:
                    description: (See `GET /datasets/{id}`)
                    type: object

    get:
      tags:
        - Domain
        - Dataset
      summary: List Datasets.
      description: Only includes Datasets that are part of the tree linked to the root  Group in the Domain.
      parameters:
        - $ref: "#/components/parameters/query_domain"
        - $ref: "#/components/parameters/authorization"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  datasets:
                    type: array
                    items:
                      description: UUID of each Dataset.
                      type: string
                      examples:
                        - "d-21ae0bbe-2dea-11e8-9391-0242ac110009"
                  hrefs:
                    type: array
                    description: >
                      List of references to other objects.

                      Should contain references for:
                      `attributes`,
                      `data`,
                      `home`,
                      `root`,
                      `self`
                    items:
                      type: object
                      properties:
                        href:
                          description: URL reference.
                          type: string
                        rel:
                          description: Relation to this object.
                          type: string
                    examples:
                      - rel: "attributes"
                        href: "http://localhost:5101/datasets/d-d257f938-3854-11e8-a123-0242ac110009/attributes?domain=/home/test_user_1/file"
                      - rel': "data"
                        href: "http://localhost:5101/datasets/d-d257f938-3854-11e8-a123-0242ac110009/value?domain=/home/test_user_1/file"
                      - rel: "home"
                        href: "http://localhost:5101/?domain=/home/test_user_1/file"
                      - rel: "root"
                        href: "http://localhost:5101/groups/g-d20a1cc2-3854-11e8-a123-0242ac110009?domain=/home/test_user_1/file"
                      - rel: "self"
                        href: "http://localhost:5101/datasets/d-d257f938-3854-11e8-a123-0242ac110009?domain=/home/test_user_1/file"
        default:
          description: Operation unsuccessful.

  # end '/datasets'

  /datasets/{id}:
    get:
      tags:
        - Dataset
      summary: Get information about a Dataset.
      parameters:
        - $ref: "#/components/parameters/path_dataset_uuid"
        - $ref: "#/components/parameters/query_domain"
        - $ref: "#/components/parameters/authorization"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    description: UUID of this Dataset.
                    type: string
                    examples:
                      - "d-21ae0bbe-2dea-11e8-9391-0242ac110009"
                  root:
                    description: UUID of root Group in Domain.
                    type: string
                    examples:
                      - "g-d313d498-2de4-11e8-9391-0242ac110009"
                  domain:
                    type: string
                    examples:
                      - "/home/test_user1/file"
                  created:
                    type: number
                    examples:
                      - 1521734424.3
                  lastModified:
                    type: number
                    examples:
                      - 1521734424.3
                  attributeCount:
                    type: number
                    examples:
                      - 0
                  "type":
                    description: TODO
                    type: object
                    properties:
                      class:
                        type: string
                        description: >
                          TODO
                        enum:
                          - H5T_COMPOUND
                          - H5T_FLOAT
                          - H5T_INTEGER
                      base:
                        type: string
                        description: >
                          TODO

                          Only present if class is not `H5T_COMPUND`.
                      fields:
                        description: >
                          List of fields in a compound dataset.

                          Only present if `class` is `H5T_COMPOUND`.
                        type: array
                        items:
                          type: object
                          properties:
                            name:
                              type: string
                              description: >
                                Descriptive or identifying name.
                                Must be unique in the fields list.
                            type:
                              type: string
                              description: >
                                Enum of pre-defined type, UUID of committed type,
                                or type definition. (TODO: see `POST Dataset`?)
                    examples:
                      - base: H5T_STD_U32LE
                        class: H5T_INTEGER
                  shape:
                    description: TODO
                    type: object
                    properties:
                      class:
                        type: string
                        description: >
                          String enum indicating expected structure.

                          + H5S_NULL -- Dataset has no data and no shape.

                          + H5S_SCALAR -- Single entity as the Datast.

                          + H5S_SIMPLE -- Dataset has hyperrectangular shape of
                            one or more dimensions.
                        enum:
                          - H5S_NULL
                          - H5S_SCALAR
                          - H5S_SIMPLE
                      dims:
                        type: array
                        description: >
                          Extent of each dimension in Dataset.

                          Only present if `class` is `H5S_SIMPLE`.
                        items:
                          type: number
                      maxdims:
                        type: array
                        description: >
                          Maximum possible extent for each dimension.

                          Value of `0` in array indicates that the dimension has
                          unlimited maximum extent.

                          Only present if `class` is `H5S_SIMPLE`, and
                          `maxdims` was included upon Dataset creation.
                        items:
                          type: number
                    examples:
                      - class: H5S_SIMPLE
                        dims: [4, 4, 4]
                        maxdims: [4, 4, 4]
                  layout:
                    description: TODO
                    type: object
                    examples:
                      - dims: [4, 4, 4]
                        class: H5D_CHUNKED
                  creationProperties:
                    description: >
                      Dataset creation properties as provided upon creation.
                    type: object
                  hrefs:
                    description: >
                      List of references to other objects.

                      Must include references to only:
                      `attributes`,
                      `data` (shape class `H5S_NULL` must _not_ include `data`),
                      `root`,
                      `self`.
                    type: array
                    items:
                      type: object
                      properties:
                        href:
                          description: URL to reference.
                          type: string
                        rel:
                          description: Relation to this object.
                          type: string
        default:
          description: Operation unsuccessful.

    delete:
      tags:
        - Dataset
      summary: Delete a Dataset.
      description: >
        Links to this Dataset are not deleted.

        TODO: Attributes and commited types are not deleted.
      parameters:
        - $ref: "#/components/parameters/path_dataset_uuid"
        - $ref: "#/components/parameters/query_domain"
        - $ref: "#/components/parameters/authorization"
      responses:
        "200":
          description: >
            Dataset deleted. Always returns empty object `{}`.
          content:
            application/json:
              schema:
                type: object
        default:
          description: Operation unsuccessful.

  # end /datasets/{id}

  /datasets/{id}/shape:
    put:
      tags:
        - Dataset
      summary: Modify a Dataset's dimensions.
      description: >
        Only datasets with `maxdims` may be resized.

        Dataset may not shrink (TODO).
      parameters:
        - $ref: "#/components/parameters/path_dataset_uuid"
        - $ref: "#/components/parameters/query_domain"
        - $ref: "#/components/parameters/authorization"
      requestBody:
        required: true
        description: >
          Array of nonzero integers.

          Length must equal Dataset's rank -- one value per dimension.

          New extent must be greater than or equal to the current extent
          and less than or equal to maximum extent (from `maxdims`).
          For dimension index `i`, if `maxdims[i] == 0` then its maximum
          extent is unbounded.
        content:
          application/json:
            schema:
              type: object
              required:
                - shape
              properties:
                shape:
                  type: array
                  items:
                    type: number
      responses:
        "201":
          description: >
            Shape dimensions updated.

            Always returns `{"hrefs": []}` upon success.
          content:
            application/json:
              schema:
                type: object
                properties:
                  hrefs:
                    type: array
                    items:
                      type: string # never relevant
                examples:
                  - hrefs: []
        default:
          description: Operation unsuccessful.

    get:
      tags:
        - Dataset
      summary: Get information about a Dataset's shape.
      parameters:
        - $ref: "#/components/parameters/path_dataset_uuid"
        - $ref: "#/components/parameters/query_domain"

        - $ref: "#/components/parameters/authorization"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: object
                description: >
                  (See `GET /datasets/{id}`)
                properties:
                  created:
                    type: number
                  lastModified:
                    type: number
                  shape:
                    type: object
                  hrefs:
                    type: array
                    description: >
                      Must include references to only:
                      `owner`,
                      `root`,
                      `self`.
                    items:
                      type: object
                      properties:
                        href:
                          type: string
                          description: URL of resource
                        rel:
                          type: string
                          description: relation to this object
        default:
          description: Operation unsuccessful.
  #end /datasets/{id}/shape

  /datasets/{id}/type:
    get:
      tags:
        - Dataset
      summary: Get information about a Dataset's type.
      parameters:
        - $ref: "#/components/parameters/path_dataset_uuid"
        - $ref: "#/components/parameters/query_domain"
        - $ref: "#/components/parameters/authorization"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: object
                description: >
                  (See `GET /datasets/{id}`)
                properties:
                  type:
                    type: object
                  hrefs:
                    type: array
                    items:
                      type: object
                      properties:
                        href:
                          type: string
                          description: URL of resource
                        rel:
                          type: string
                          enum:
                            - owner
                            - root
                            - self
                          description: relation to this object
        default:
          description: Operation unsuccessful.

  #end /datasets/{id}/type

  /datasets/{id}/value:
    put:
      tags:
        - Dataset
      summary: Write values to Dataset.
      description: Overwrites any existing data in update region.
      parameters:
        - $ref: "#/components/parameters/path_dataset_uuid"
        - $ref: "#/components/parameters/query_domain"
        - $ref: "#/components/parameters/authorization"

      requestBody:
        required: true
        description: >
          JSON object describing what to write.

          At least one of `points` OR `start, stop, step` must be provided.

          `value` must be provided if not using `points`, else _either_
          `value` or `value_bas64` must be provided.
        content:
          application/json:
            schema:
              type: object
              properties:
                start:
                  description: >
                    Start coordinate of update.

                    Each coordinate value must be non-negative and less than
                    the extent of the dimension.

                    Default start value is 0 for each dimension.
                  type: array
                  items:
                    type: number
                stop:
                  description: >
                    End coordinate of update.

                    Each coordinate value must be greater than `start` and less
                    than the dimension's extent.
                  type: array
                  items:
                    type: number
                step:
                  description: >
                    Coordinate increment step for each dimension.
                  type: array
                  items:
                    type: number
                points:
                  description: >
                    List of coordinate points to update.

                    Overrides `start`, `stop`, and `step`.

                    If dataset is of rank 1 (single-dimension), each item
                    should be an integer index not less than zero and less than
                    the extent of the dataset.

                    If dataset is multi-dimensional, each item should be a list
                    of non-negative integers, each array being a valid
                    coordinate in the dataset.

                    Number of elements in list should equal that of `value`.

                    TODO: scalar dataset?
                  type: array
                  items:
                    type: string
                  examples:
                    - [[4, 3, 1], [6, 1, 2], [12, 0, 0]]
                value:
                  description: >
                    JSON array containing values to write.

                    (TODO: 'anything in array' may give Swagger some grief.)
                  type: array
                  items:
                    type: string # TODO: not really...
                  examples:
                    - [323, 16, 44]
                value_base64:
                  description: >
                    Base64-encoded binary data.

                    Use instead of `value` for more efficient large data
                    transfers.

                    Only supported for fixed-length datatypes.
                  type: string
              required:
                - value
      responses:
        "200":
          description: Update/write successful.
        default:
          description: Operation unsuccessful.

    get:
      tags:
        - Dataset
      summary: Get values from Dataset.
      description: Either get the entire Dataset or a selection.
      parameters:
        - $ref: "#/components/parameters/path_dataset_uuid"
        - $ref: "#/components/parameters/query_domain"
        - name: select
          in: query
          schema:
            type: string
          description: >
            URL-encoded string representing a selection array.

            _Example_: `[3:9,0:5:2]`
            gets values from two-dimensional dataset:
            [[3,0], [4,0], ..., [8,0], [3,2], [4,2], ..., [8,4]]
            (18 data points total: `6*3`)

            In EBNF plaintext:

            `SELECT` := `'[' SLICE { ',' SLICE } ']'`

            `SLICE` := `START ':' STOP [ ':' STEP ]`

            `START` := non-negative integer less than the dimension's
            extent.

            `STOP` := non-negaive integer greater than `START` and less than
            or equal to the dimension's extent. Is the first index _not_
            included in the selection hyperslab.

            `STEP` := non-negative integer greater than zero; is the
            increment of index in dimension between each value. If omitted,
            defaults to `1` (contiguous indices).
        - name: query
          in: query
          schema:
            type: string
          description: >
            URL-encoded string of conditional expression to filter selection.

            E.g., the condition `(temp > 32.0) & (dir == 'N')` would return
            elements of the dataset where the `temp` field was greater than
            `32.0` _and_ the `dir` field was equal to `N`.
            TODO: query syntax description

            _Must_ be URL-encoded.

            Can be used in conjunction with `select` parameter to filter
            a hyberslab selection. Can be used in conjunction with `Limit`
            parameter to restrict number of values returned.

            Only applicable to one-dimensional compound datasets.
            TODO: verify
        - name: Limit
          in: query
          schema:
            type: number
          description: >
            Integer greater than zero.

            If present, specifies maximum number of values to return.

            Applies only to the `query` parameter.

        - $ref: "#/components/parameters/authorization"
      ## WISHLIST: Remove parameters from URI and fold in 'POST DATASET' with
      ##           a single request body format:
      ##type: object:
      ##properties:
      ##  points:
      ##    description: >
      ##        Specific data points to return from the Dataset.
      ##
      ##        Overrides any other selection element.
      ##    type: array # array of points/coordinates in dataset
      ##    items:
      ##      type: array # index in each dimension for point.
      ##                  # length must equal dataset rank.
      ##      items:
      ##        type: number # 0 <= N < dimension extent
      ##  select:
      ##    description: >
      ##        Coordinate ranges or strides defining a hyberslab subset of Dataset.
      ##
      ##        Array length must equal rank of Dataset.
      ##        Empty range object, `{}`, stands in for entire dimension.
      ##    type: array
      ##    items:
      ##      type: object
      ##      properties:
      ##        start:
      ##          description: >
      ##              Integer greater than or equal to `0` and less than extent.
      ##
      ##              Default `0`.
      ##          type: number
      ##        stop:
      ##          description: >
      ##              Integer greater than `start` and less than or equal to extent.
      ##
      ##              First index _not_ included in selection hyperslab.
      ##
      ##              Default dimension extent. (`-1`?)
      ##          type: number
      ##        step:
      ##          description: Positive, non-zero integer. Default `1`.
      ##          type: number
      ##    examples: # array of 'objects'
      ##      - [{},
      ##       {"start": 3, "stop": 19, "step": 4},
      ##       {"stop": 10, "step: 3},
      ##       {"start": 126}]
      ##    # would get [[0,1,..,n], [3,7,11,15], [0,3,6,9], [126,127,..,n]]
      ##  query:
      ##    description: >
      ##        Filter response values (even from hyperslab selection).
      ##    type: object
      ##    properties:
      ##      condition:
      ##        description: >
      ##            String describing contitions required to include the value in
      ##            response. E.g., `"(temp > 32.0) & (dir == 'N')"` would return
      ##            elements of the dataset where the `temp` field was greater than
      ##            `32.0` and the `dir` field was equal to `N`.
      ##        type: string
      ##      limit:
      ##        description: Integer greater than 0, maximum number of values to get.
      ##        type: number
      responses:
        "200":
          description: OK
          content:
            application/octet-stream:
              schema:
                type: string
                format: binary
            application/json:
              schema:
                type: object
                properties:
                  index:
                    description: >
                      List of indices (TODO: coordinates?) corresponding with
                      each value returned. i.e., `index[i]` is the coordinate of
                      `value[i]`.

                      Only present if `query` parameter is part of the request
                      URI.
                    type: array
                    items:
                      type: string # TODO: integer or array of integers WISHLIST: arrays
                    examples:
                      - [0, 1, 2, 3, 4, 5, 6, 7]
                  value:
                    type: array
                    items: {}
                    examples:
                      - [
                          [1, 3, 5, 7],
                          [2, 6, 10, 14],
                          [3, 9, 15, 21],
                          [4, 12, 20, 28],
                          [5, 15, 25, 35],
                          [6, 18, 30, 42],
                          [7, 21, 35, 49],
                          [8, 24, 40, 56],
                        ]
        default:
          description: Operation unsuccessful.

    post:
      tags:
        - Dataset
      summary: Get specific data points from Dataset.
      # TODO: WISHLIST: fold into GET DATASET; 'POST' is counterintuitive.
      parameters:
        - $ref: "#/components/parameters/path_dataset_uuid"
        - $ref: "#/components/parameters/query_domain"
        - $ref: "#/components/parameters/authorization"
      requestBody:
        description: JSON array of coordinates in the Dataset.
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                points:
                  type: array
                  items:
                    type: array # TODO: verify array of arrays; esp. in single-coordinate case... [[5,3]], vs [5,3]
                    items:
                      type: number
                  examples:
                    - [[0, 0], [0, 1], [1, 0], [1, 1]]
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  value:
                    type: array
                    items: {}
                    examples:
                      - [0, 1, 1, 2]
        default:
          description: Operation unsuccessful.

  #end /datasets/{id}/value

  /datatypes:
    "post":
      tags:
        - Domain
        - Datatype
      summary: Commit a Datatype to the Domain.
      parameters:
        - $ref: "#/components/parameters/query_domain"
        - $ref: "#/components/parameters/authorization"
      requestBody:
        description: >
          Definition of Datatype to commit.
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                type:
                  description: >
                    _Can be a string enum of a predefined type_, e.g.,
                    `H5T_STD_U32LE` or `H5T_IEEE_F64LE`.
                  type: object
                  properties:
                    class:
                      type: string
                      description: >
                        Must be "H5T_COMPOUND"?
                      examples:
                        - H5T_COMPOUND
                    fields:
                      type: array
                      items:
                        type: object
                        properties:
                          name:
                            description: >
                              Identifier of the field.
                            type: string
                          "type":
                            description: >
                              Type of the field.

                              TODO: pre-defined enum string vs type object?
                            type: string
                      examples:
                        - [
                            { name: temp, type: "H5T_STD_I32LE" },
                            { name: pressure, type: "H5T_IEEE_F32LE" },
                          ]
      responses:
        "201":
          description: CREATED
          content:
            application/json:
              schema:
                type: object
                description: TODO
                properties:
                  attributeCount:
                    type: number
                  id:
                    type: string
        default:
          description: Operation unsuccessful.

  #    get: # TODO: not present in tests or elsewhere
  #      tags:
  #        - Domain
  #        - Datatype
  #      summary: Get a list of Datatypes committed on Domain.

  # end /datatypes

  /datatypes/{id}:
    get:
      tags:
        - Datatype
      summary: Get information about a committed Datatype
      parameters:
        - $ref: "#/components/parameters/query_domain"
        - $ref: "#/components/parameters/path_datatype_uuid"
        - $ref: "#/components/parameters/authorization"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: object
                description: TODO
                properties:
                  attributeCount:
                    type: number
                  created:
                    type: number
                  id:
                    type: string
                  lastModified:
                    type: number
                  root:
                    type: string
                  type:
                    type: object # TODO
                  hrefs:
                    type: array
                    description: TODO
                    items:
                      type: object
                      properties:
                        href:
                          type: string
                          description: URL of resource
                        rel:
                          type: string
                          description: relation to this object
        default:
          description: Operation unsuccessful.

    delete:
      tags:
        - Datatype
      summary: Delete a committed Datatype.
      parameters:
        - $ref: "#/components/parameters/query_domain"
        - $ref: "#/components/parameters/path_datatype_uuid"
        - $ref: "#/components/parameters/authorization"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: object
                description: 'Always returns `{"hrefs": []}` (TODO confirm)'
                properties:
                  hrefs:
                    type: array
                    items:
                      type: object
                      properties:
                        href:
                          type: string
                          description: URL of resource
                        rel:
                          type: string
                          description: relation to this object
                    examples:
                      - []
        default:
          description: Operation unsuccessful.

  # end /datatypes/{id}

  /{collection}/{obj_uuid}/attributes:
    get:
      tags:
        - Attribute
        - Group
        - Dataset
        - Datatype
      summary: List all Attributes attached to the HDF5 object `obj_uuid`.
      description: Attributes sorted alphanumerically by name.
      parameters:
        - $ref: "#/components/parameters/authorization"
        - name: collection
          in: path
          description: "The collection of the HDF5 object (one of: `groups`, `datasets`, or `datatypes`)."
          schema:
            type: string
            enum:
              - groups
              - datasets
              - datatypes
          required: true
        - name: obj_uuid
          in: path
          description: UUID of object.
          schema:
            type: string
            format: uuid
          required: true
        - $ref: "#/components/parameters/query_domain"
        - name: Limit
          in: query
          description: >
            Cap the number of Attributes listed.

            Can be used with `Marker`.
          schema:
            type: number
        - name: Marker
          in: query
          description: >
            Start Attribute listing _after_ the given name.
          schema:
            type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: object
                description: >
                  TODO
                properties:
                  attributes:
                    type: array
                    items:
                      type: object # TODO: is this complete?
                      properties:
                        created:
                          type: number
                        href:
                          type: string # TODO: investigate
                        name:
                          type: string
                        shape:
                          type: object # TODO: specify?
                        type:
                          type: object # TODO: specify?
                        value:
                          type: string # TODO: whatever the user put there
                  hrefs:
                    type: array
                    items:
                      type: object
                      properties:
                        href:
                          type: string
                          description: URL of resource
                        rel:
                          type: string
                          description: relation to this object
                    examples:
                      - []
        default:
          description: Operation unsuccessful.

  # end /{collection}/{id}/attributes

  /{collection}/{obj_uuid}/attributes/{attr}:
    put:
      tags:
        - Attribute
        - Group
        - Dataset
        - Datatype
      summary: Create an attribute with name `attr` and assign it to HDF5 object `obj_uudi`.
      parameters:
        - $ref: "#/components/parameters/authorization"
        - $ref: "#/components/parameters/query_domain"
        - name: collection
          required: true
          in: path
          description: The collection of the HDF5 object (`groups`, `datasets`, or `datatypes`).
          schema:
            type: string
            enum:
              - groups
              - datasets
              - datatypes
        - name: obj_uuid
          in: path
          description: HDF5 object's UUID.
          schema:
            type: string
          required: true
        - name: attr
          in: path
          description: Name of attribute.
          schema:
            type: string
          required: true
      requestBody:
        description: Information to create a new attribute of the HDF5 object `obj_uuid`.
        required: true
        content:
          application/json:
            schema:
              type: object # TODO: Put a real definition.
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: object
                description: TODO
        #            properties: # TODO: not specified in tests or elsewhere.
        #              hrefs:
        #                type: array
        #                items:
        #                  type: object
        #                  properties:
        #                    href:
        #                      type: string
        #                      description: URL of resource
        #                    rel:
        #                      type: string
        #                      description: relation to this object
        #                examples:
        #4                - []
        default:
          description: Operation unsuccessful.

    get:
      tags:
        - Attribute
        - Group
        - Dataset
        - Datatype
      summary: Get information about an Attribute.
      parameters:
        - $ref: "#/components/parameters/authorization"
        - $ref: "#/components/parameters/query_domain"
        - name: collection
          in: path
          description: Collection of object (Group, Dataset, or Datatype).
          schema:
            type: string
            enum:
              - groups
              - datasets
              - datatypes
          required: true
        - name: obj_uuid
          in: path
          description: UUID of object.
          schema:
            type: string
            format: uuid
          required: true
        - name: attr
          in: path
          description: Name of attribute.
          schema:
            type: string
            pattern: ^[^/]+$
          required: true
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: object
                description: >
                  TODO
                properties:
                  created:
                    type: number
                  lastModified:
                    type: number
                  name:
                    type: string
                  shape:
                    type: object
                  value:
                    type: string # TODO whatever the user put there?
                  hrefs:
                    type: array
                    items:
                      type: object
                      properties:
                        href:
                          type: string
                          description: URL of resource
                        rel:
                          type: string
                          description: relation to this object
                    examples:
                      - []
        default:
          description: Operation unsuccessful.

  # end /{collection}/{id}/attributes/{name}

  /acls:
    get:
      tags:
        - ACLS
        - Domain
      summary: Get access lists on Domain.
      #      description: Attributes sorted alphanumerially by name. # TODO
      parameters:
        - $ref: "#/components/parameters/query_domain"
        - $ref: "#/components/parameters/authorization"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: object
                description: TODO
                properties:
                  acls:
                    $ref: "#/components/schemas/ACLS"
                  hrefs:
                    type: array
                    items:
                      type: object
                      properties:
                        href:
                          type: string
                          description: URL of resource
                        rel:
                          type: string
                          description: relation to this object
                    examples:
                      - []
        default:
          description: Operation unsuccessful.

  # end /acls

  /acls/{user}:
    get:
      tags:
        - ACLS
        - Domain
      summary: Get users's access to a Domain.
      parameters:
        - $ref: "#/components/parameters/query_domain"
        - $ref: "#/components/parameters/authorization"
        - name: user
          required: true
          in: path
          description: User identifier/name.
          schema:
            type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: object
                description: TODO
                properties:
                  acl:
                    $ref: "#/components/schemas/ACL"
                  hrefs:
                    type: array
                    items:
                      type: object
                      properties:
                        href:
                          type: string
                          description: URL of resource
                        rel:
                          type: string
                          description: relation to this object
                    examples:
                      - []
        default:
          description: Operation unsuccessful.

    put:
      tags:
        - ACLS
        - Domain
      summary: Set user's access to the Domain.
      requestBody:
        required: true
        description: >
          JSON object with one or more keys from the set: 'create', 'read',
          'update', 'delete', 'readACL', 'updateACL'.  Each key should have
          a boolean value.  Based on keys provided, the user's ACL will be 
          updated for those keys.  If no ACL exist for the given user, it
          will be created.
        content:
          application/json:
            schema:
              type: object
              properties:
                create:
                  type: boolean
                update:
                  type: boolean
                delete:
                  type: boolean
                updateACL:
                  type: boolean
                read:
                  type: boolean
                readACL:
                  type: boolean
      parameters:
        - name: user
          in: path
          description: Identifier/name of a user.
          schema:
            type: string
          required: true
        - $ref: "#/components/parameters/query_domain"
        - $ref: "#/components/parameters/authorization"

      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: object
                description: TODO
                properties:
                  acl:
                    $ref: "#/components/schemas/ACL"
                  hrefs:
                    type: array
                    items:
                      type: object
                      properties:
                        href:
                          type: string
                          description: URL of resource
                        rel:
                          type: string
                          description: relation to this object
                examples:
                  - []
        default:
          description: Operation unsuccessful.

  # end /acls/{user}

  /groups/{id}/acls:
    get:
      tags:
        - ACLS
        - Group
      summary: List access lists on Group.
      #      description: Attributes sorted alphanumerially by name.
      parameters:
        - $ref: "#/components/parameters/path_group_uuid"
        - $ref: "#/components/parameters/query_domain"
        - $ref: "#/components/parameters/authorization"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: object
                description: TODO
                properties:
                  acls:
                    $ref: "#/components/schemas/ACLS"
                  hrefs:
                    type: array
                    items:
                      type: object
                      properties:
                        href:
                          type: string
                          description: URL of resource
                        rel:
                          type: string
                          description: relation to this object
                    examples:
                      - []
        default:
          description: Operation unsuccessful.

  # end /groups/{id}/acls

  /groups/{id}/acls/{user}:
    get:
      tags:
        - ACLS
        - Group
      summary: Get users's access to a Group.
      parameters:
        - $ref: "#/components/parameters/path_group_uuid"
        - name: user
          in: path
          description: Identifier/name of a user.
          schema:
            type: string
          required: true
        - $ref: "#/components/parameters/query_domain"
        - $ref: "#/components/parameters/authorization"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: object
                description: TODO
                properties:
                  acl:
                    $ref: "#/components/schemas/ACL"
                  hrefs:
                    type: array
                    items:
                      type: object
                      properties:
                        href:
                          type: string
                          description: URL of resource
                        rel:
                          type: string
                          description: relation to this object
                    examples:
                      - []
        default:
          description: Operation unsuccessful.

  # end '/groups/{id}/acls/{user}':

  /datasets/{id}/acls:
    get:
      tags:
        - ACLS
        - Dataset
      summary: Get access lists on Dataset.
      parameters:
        - $ref: "#/components/parameters/path_dataset_uuid"
        - $ref: "#/components/parameters/query_domain"
        - $ref: "#/components/parameters/authorization"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: object
                description: TODO
                properties:
                  acls:
                    $ref: "#/components/schemas/ACLS"
                  hrefs:
                    type: array
                    items:
                      type: object
                      properties:
                        href:
                          type: string
                          description: URL of resource
                        rel:
                          type: string
                          description: relation to this object
                    examples:
                      - []
        default:
          description: Operation unsuccessful.

  # end /datasets/{id}/acls

  /datatypes/{id}/acls:
    get:
      tags:
        - ACLS
        - Datatype
      summary: List access lists on Datatype.
      #      description: Attributes sorted alphanumerially by name.
      parameters:
        - $ref: "#/components/parameters/path_datatype_uuid"
        - $ref: "#/components/parameters/query_domain"
        - $ref: "#/components/parameters/authorization"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: object
                description: TODO
                properties:
                  acls:
                    $ref: "#/components/schemas/ACLS"
                  hrefs:
                    type: array
                    items:
                      type: object
                      properties:
                        href:
                          type: string
                          description: URL of resource
                        rel:
                          type: string
                          description: Relation to `href`.
                    examples:
                      - []
        default:
          description: Operation unsuccessful.

  # end /datatypes/{id}/acls
#end paths
